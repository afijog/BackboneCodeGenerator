<@SCRIPT

// A class to get information about the Design Model
function DesignModelDefinition(pModel) {
	var oModel = pModel;
	var vClasses = getUMLClasses();
	
	// Returns the string representation for the index.html file
	this.getIndexContents = function() {
		var nClasses = vClasses.length;
		
		var vDefStr = "<!DOCTYPE HTML>";
		vDefStr += "\n<html>";
		vDefStr += "\n<head>\n";
		
		var className = "";
		
		for(var j=nClasses-1 ; j>=0 ; j--) {
			name = vClasses[j].MOF_GetAttribute("Name");
			vDefStr += "\n<script id=\""+name.toLowerCase()+"Template\" type=\"text/template\">";
			vDefStr += "\n\t<strong><%= name %></strong>";
			vDefStr += "\n</script>";
		}

		vDefStr += "\n\n<script type=\"text/javascript\" src=\""+assetsJS+"/underscore-min.js\"></script>";
		vDefStr += "\n<script type=\"text/javascript\" src=\""+assetsJS+"/jquery.min.js\"></script>";
		vDefStr += "\n<script type=\"text/javascript\" src=\""+assetsJS+"/backbone-min.js\"></script>";

		for(var j=nClasses-1 ; j>=0 ; j--) {
			className = vClasses[j].MOF_GetAttribute("Name");
			vDefStr += "\n\n<script type=\"text/javascript\" src=\""+lib+"/" + className + "Model.js\"></script>";
			vDefStr += "\n<script type=\"text/javascript\" src=\""+lib+"/" + className + "View.js\"></script>";
		}

		vDefStr += "\n\n<script type=\"text/javascript\" src=\""+lib+"/application.js\"></script>";
		vDefStr += "\n</head>";
		vDefStr += "\n<body><div id=\"contents\"></div></body>";
		vDefStr += "\n</html>";		
		
		return (vDefStr);
	}
	
	
	// Returns an array with all the UML Classes in the Design Model
	function getUMLClasses() {
		var classes = new Array();
		var count = oModel.MOF_GetCollectionCount("OwnedElements");
		var element = null
		
		for(var j=0;j<count;j++) {
			element = oModel.MOF_GetCollectionItem("OwnedElements",j);
			if (element.isKindOf("UMLClass")) {
				classes.push(element);
			}
		}
		return(classes);
	}
}

function BackboneClassDefinition(pUMLClass) {

	var oUMLClass = pUMLClass;
	var oParentUMLClass = null;
	var vImplInterfacesArr = new Array();
	
	var vHasAbstractOperations = false;
	var vParentHasValidation = false;

	var vAtrArr = __getAtributesArr();
	var vOprArr = __getMethodsArr(oUMLClass);
	var vAtrValidationArr = __getAtributesValidationArr();
	
	// Returns the string representation for the Backbone.js Model Class
	this.getModelDefinition = function() {
	
		var vDefStr = "";

		vDefStr += "var " + oUMLClass.Name + " = ";
		
		if (oParentUMLClass != null) vDefStr += oParentUMLClass.Name;
		else vDefStr += "Backbone.Model";
		
		vDefStr += ".extend({\n";
		if (vAtrArr.length > 0 ) {
			vDefStr += "\tdefaults: ";
			if (oParentUMLClass != null) {
				vDefStr += "_.defaults(";
			}
			vDefStr += "{";
				for(var j=0 ; j<vAtrArr.length ; j++) {
					vDefStr += "\n\t\t"+vAtrArr[j];
					if (j != vAtrArr.length-1) vDefStr += ",";
				}
			vDefStr += "\n\t}";
			if (oParentUMLClass != null) {
				vDefStr += ", " + oParentUMLClass.Name + ".prototype.defaults)";
			}

			if (vAtrValidationArr.length > 0 || vParentHasValidation) {
				vDefStr += ",\n\n\tvalidate: function(attrs, options) {";
				for(var j=0 ; j<vAtrValidationArr.length ; j++) {
					vDefStr += "\n"+vAtrValidationArr[j];
				}
				if (vParentHasValidation) {
					vDefStr += "\n\t\treturn " + oParentUMLClass.Name + ".prototype.validate(attrs, options);";
				}
				vDefStr += "\n\t}";
			}
		}
				
		vDefStr += "\n});\n";
		
		// Add definition of methods in prototype 
		if (vOprArr.length > 0 ) {
			for(var j=0 ; j<vOprArr.length ; j++) {
				vDefStr += "\n"+ oUMLClass.Name + '.prototype.'+ vOprArr[j];
			}
		}
		
		vDefStr += "\n";
		
		return(vDefStr);		
	};	

	// Returns the string representation for the Backbone.js Model Collection Class	
	this.getCollectionDefinition = function() {
	
		var vDefStr = "";

		vDefStr += "var " + oUMLClass.Name + "Collection = ";
		
		if (oParentUMLClass != null) vDefStr += oParentUMLClass.Name;
		else vDefStr += "Backbone.";
		
		vDefStr += "Collection.extend({\n";	
		vDefStr += "\tmodel: " + oUMLClass.Name;
		vDefStr += "\n});\n";

		return(vDefStr);		
	};		
	
	// Sets the parent class
	this.setParentClass = function(pUMLClass) {
		oParentUMLClass=pUMLClass;
		return;
	}

	// Get all attributes of the Class for 'defaults'
	function __getAtributesArr() {
		var vItemArr = new Array();
		var vItemCount = oUMLClass.MOF_GetCollectionCount("Attributes");
		for(var j=0 ; j<vItemCount ; j++) 
			vItemArr.push(__getAtributeDefStr(oUMLClass.MOF_GetCollectionItem("Attributes",j)));
		return(vItemArr);
	}

	// Get all attributes of the Class for 'validation'
	function __getAtributesValidationArr() {
		var vItemArr = new Array();	
		var vItemCount = oUMLClass.MOF_GetCollectionCount("Attributes");
		for(var j=0;j<vItemCount;j++) {
			attrValidation = __getAtributeValidationDefStr(oUMLClass.MOF_GetCollectionItem("Attributes",j));
			if (attrValidation !== "") {
				vItemArr.push(attrValidation);
			}
		}
		return(vItemArr);
	}
	
	// Get all the methods (operations) for the UMLClass
	function __getMethodsArr(oMethodContainer) {
		var vItemArr = new Array();
		var vItemCount = oMethodContainer.MOF_GetCollectionCount("Operations");
		for(var j=0;j<vItemCount;j++) {
			vItemArr.push(__getMethodDefStr(oMethodContainer.MOF_GetCollectionItem("Operations",j)));	
		}
		return(vItemArr);
	}

	// Get the string representation of the method
	function __getMethodDefStr(oMethod)
	{
		var vStrName,vInParamStr,vBodyStr,vParamArr;
		
		vStrName=oMethod.MOF_GetAttribute("Name");
		
		vParamArr=__getMethodParamArr(oMethod);
		// Get the parameters of the method
		vInParamStr=vParamArr['in'].join(', ');
		
		vBodyStr=" {\n\t";
		
		var existsDefaultInValues = false;
		
		for(var j=0;j<vParamArr['inDefaultValues'].length;j++) {
			var paramDefaultValue = vParamArr['inDefaultValues'][j];
			if (paramDefaultValue != "") {
				var paramName = vParamArr['in'][j];
				vBodyStr += "\n\tif(typeof(" + paramName + ")==='undefined') " + paramName + " = " + paramDefaultValue+";";
				existsDefaultInValues = true;
			}
		}

		if (existsDefaultInValues) {
			vBodyStr += "\n\n\t";
		}
		
		if(vParamArr['return'].length>0) {
			var returnParamName = vParamArr['return'][0];
			vBodyStr+= "var " + returnParamName;
			
			if (vParamArr['returnDefaultValues'][0] != "") {
				vBodyStr+= " = " + vParamArr['returnDefaultValues'][0];
			}
			vBodyStr+=";\n";
			vBodyStr+= "\treturn " + returnParamName + ";";
		}
		else vBodyStr+="return;";
		vBodyStr+="\n};";
		
		return(vStrName + ' = function ('+vInParamStr+')'+vBodyStr);
	}

	function __getMethodParamArr(oMethod) {
		var vItemArr = {'in' : null, 'inDefaultValues' : null, 'return' : null, 'returnDefaultValues' : null};
		vItemArr['in'] = new Array();
		vItemArr['inDefaultValues'] = new Array();
		vItemArr['return'] = new Array();
		vItemArr['returnDefaultValues'] = new Array();
		var vItemCount = oMethod.MOF_GetCollectionCount("Parameters");
		var oItem=null;
		var vDirection=null;
		for(var j=0;j<vItemCount;j++) {
			oItem=oMethod.MOF_GetCollectionItem("Parameters",j);
			vDirection=oItem.MOF_GetAttribute("DirectionKind");
			if(vDirection!='pdkReturn') {
				vItemArr['in'].push(oItem.MOF_GetAttribute("Name"));
				vItemArr['inDefaultValues'].push(oItem.MOF_GetAttribute("DefaultValue"));
			}
			else { 
				vItemArr['return'].push(oItem.MOF_GetAttribute("Name"));
				vItemArr['returnDefaultValues'].push(oItem.MOF_GetAttribute("DefaultValue"));
			}
			oItem=null;
			vDirection=null;
		}				
		return(vItemArr);
	}
	
	// Returns the attribute definition for 'defaults'
	function __getAtributeDefStr(oAtribute)
	{
		vStrName = oAtribute.MOF_GetAttribute("Name");
		vStrInitialValue = oAtribute.MOF_GetAttribute("InitialValue");
		
		return("\"" + vStrName + "\" : " + vStrInitialValue);
	}
	
	// Returns the attribute definition for 'validation'
	function __getAtributeValidationDefStr(oAtribute)
	{
		vStrName = oAtribute.MOF_GetAttribute("Name");
		var vValidationStr = "";
		if (oAtribute.Multiplicity.indexOf('1',0) == 0) {
			var vValidationStr = "\t\tif (! attrs." + vStrName + ") {\n"
			vValidationStr += "\t\t\treturn \"Attribute " + vStrName + " cannot be null or empty\";";
			vValidationStr += "\n\t\t}"
		}
		return(vValidationStr);
	}	
}

@>


<@REPEAT {R}::;UMLModel;;@>	
<@SCRIPT
var vCurrentModelName=current().Name;
var designModel;
if (vCurrentModelName=="Design Model") { 
designModel = new DesignModelDefinition(current());
}
@>
<@ENDREPEAT@>	

<@SCRIPT
	var lib = "lib";
	var assetsJS = "assets/js";
	fileBegin(getTarget()+"\\index.html");
@>	
<@= designModel.getIndexContents() @>
<@SCRIPT
	fileEnd();
@>

<@SCRIPT
////////////////////////////////////////
// Backbone Application.js 
////////////////////////////////////////
    fileBegin(getTarget()+"\\"+lib+"\\application.js");
@>
<@= "//******* Generated application.js **********" @>
<@SCRIPT
    fileEnd();
@>

<@REPEAT {R};UMLClass;;@>
<@SCRIPT
	////////////////////////////////////////
	// Backbone Model Class
	////////////////////////////////////////
	fileBegin(getTarget()+"\\"+lib+"\\"+current().Name+"Model.js");
	var vClassName=current().Name;
	var backboneClass= new BackboneClassDefinition(current());
@>
<@REPEAT {R}::;UMLGeneralization;;@>	
<@SCRIPT
	// Assign the parent class for each Generalization (Inheritance)
	if(vClassName==current().Child.Name) backboneClass.setParentClass(current().Parent);
@>
<@ENDREPEAT@>
<@="// ******* Generated " + vClassName + "Model and " + vClassName + "Collection **********" @>
<@=backboneClass.getModelDefinition()@>
<@=backboneClass.getCollectionDefinition()@>
<@SCRIPT
    fileEnd();
@>

<@SCRIPT
	////////////////////////////////////////
	// Backbone View and CollectionView Class
	////////////////////////////////////////
    fileBegin(getTarget()+"\\"+lib+"\\"+current().Name+"View.js");
    var vClassName=current().Name;
	var vClassNameLower=vClassName.toLowerCase();
    var backboneClass= new BackboneClassDefinition(current());
@>
<@="// ******* Generated " + vClassName + "View and " + vClassName + "CollectionView **********" @>
<@="var "+vClassName+"View = Backbone.View.extend({" @>
<@="\ttagName: 'li'," @>
<@="\n\ttemplate: _.template( $('#"+vClassNameLower+"Template').html() )," @>
<@="\n\trender: function() {" @>
<@="\t\tthis.$el.html( this.template(this.model.toJSON()) );" @>
<@="\t\treturn this;" @>
<@="\t}" @>
<@="});" @>

<@="var "+vClassName+"CollectionView = Backbone.View.extend({" @>
<@="\ttagName: 'ul'," @>
<@="\n\trender: function() {" @>
<@="\t\tthis.collection.each(function("+vClassNameLower+") {" @>
<@="\t\t\tvar "+vClassNameLower+"View = new "+vClassName+"View({ model: "+vClassNameLower+" });" @>
<@="\t\t\tthis.$el.append("+vClassNameLower+"View.render().el);" @>
<@="\t\t}, this);" @>
<@="\t\treturn this;" @>
<@="\t}" @>
<@="});" @>
<@SCRIPT
    fileEnd();
@>
<@ENDREPEAT@>